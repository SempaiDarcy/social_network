{"version":3,"file":"static/js/8.73365b83.chunk.js","mappings":"gLACA,EAA+B,mCAA/B,EAA2E,6B,mBCU9DA,EAAe,SAACC,GACzB,OACI,gBAAKC,UAAWC,EAAhB,UACI,UAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,UACKJ,EAAMK,MACP,gBAAKJ,UAAWC,EAAUI,IAAKN,EAAMO,OAAQC,IAAK,iBCflE,EAAmC,0CAAnC,EAAuF,iCAAvF,EAAqI,oCAArI,EAAkL,gCCSrKC,EAAkB,SAACT,GAC5B,OACQ,iBAAKC,UAAWC,EAAhB,UACOF,EAAMO,QAAO,gBAAKN,UAAWC,EAAUI,IAAKN,EAAMO,OAAQC,IAAK,YAC5D,gBAAKP,UAAWC,EAAUI,IAAI,oHAAoHE,IAAI,SAC5J,gBAAKP,UAAWC,EAAhB,UACI,iBAAMD,UAAWC,EAAjB,SAA6BF,EAAMU,gB,iDCNjDC,GAAYC,EAAAA,EAAAA,GAAiB,KAqBtBC,GAAmBC,EAAAA,EAAAA,GAA+B,CAE3DC,KAAM,wBAFsBD,EApBgC,SAA1DE,EAA2DhB,GAC7D,IAAOiB,EAAsBjB,EAAtBiB,aAAaC,EAASlB,EAATkB,MAKpB,OACI,kBAAMC,SALe,SAACC,GACtBH,EAAaG,GACbF,KAGkCjB,UAAWC,EAAAA,EAAAA,KAA7C,WACI,gBAAKD,UAAWC,EAAAA,EAAAA,KAAhB,UACI,SAACmB,EAAA,EAAD,CAAOC,YAAY,oBACZC,KAAK,OACLlB,KAAK,UACLmB,SAAU,CAACC,EAAAA,EAAUd,GACrBe,UAAWC,EAAAA,OAGtB,SAACC,EAAA,EAAD,CAAcb,KAAMC,U,uCCRhC,GAAea,EAAAA,EAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KAbkB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAME,YAAYC,QAC/BC,aAAcJ,EAAME,YAAYG,aAGf,SAACC,GACtB,MAAO,CACHC,YAAa,SAAC7B,GAAD,OAAqB4B,GAASE,EAAAA,EAAAA,GAAa9B,SAGhE,ECKyC,SAAC,GAIO,IAHHuB,EAGE,EAHFA,YACAG,EAEE,EAFFA,aACAG,EACE,EADFA,YAM1C,OACI,4BACI,gBAAKtC,UAAWC,EAAAA,EAAAA,oBAEZ,iBAAKD,UAAWC,EAAAA,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,EAAAA,aAAhB,SACK+B,EAAYQ,KAAI,SAAAC,GACb,OACI,SAAC3C,EAAD,CAAcK,GAAIsC,EAAKtC,GAAIC,KAAMqC,EAAKrC,KAAME,OAAQmC,EAAKnC,QAAamC,EAAKtC,UAKvF,gBAAKH,UAAWC,EAAAA,EAAAA,gBAAhB,SACKkC,EAAaK,KAAI,SAAAC,GACd,OACI,SAACjC,EAAD,CACIC,QAASgC,EAAKhC,QACdH,OAAQmC,EAAKnC,QACRmC,EAAKtC,UAK1B,gBAAKH,UAAWC,EAAAA,EAAAA,mBAAhB,UACI,SAACW,EAAD,CAAkBM,SA5BX,SAACC,GACxBmB,EAAYnB,EAAOV,wB,gICvBrBiC,EAAkB,SAACX,GACrB,MAAO,CACHY,OAAQZ,EAAMa,KAAKD,SAIpB,SAASd,EAAoBgB,GAQhC,OAAOf,EAAAA,EAAAA,IAAQY,EAARZ,EAPmB,SAAC/B,GACvB,IAAO4C,EAAwB5C,EAAxB4C,OAAWG,GAAlB,OAA+B/C,EAA/B,GACA,OAAK4C,GAEE,SAACE,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAU5C,GAAG,gB,mBChBzC,KAAgB,QAAU,yBAAyB,aAAe,8BAA8B,mBAAqB,oCAAoC,aAAe","sources":["webpack://samurai-way/./src/components/Dialogs/DialogsItems/DialogsItems.module.css?86ae","components/Dialogs/DialogsItems/DialogsItems.tsx","webpack://samurai-way/./src/components/Dialogs/DialogsMessages/DialogsMessages.module.css?ff22","components/Dialogs/DialogsMessages/DialogsMessages.tsx","components/Dialogs/MessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsItems\":\"DialogsItems_dialogsItems__KM76Q\",\"avatar\":\"DialogsItems_avatar__6xR2r\",\"active\":\"DialogsItems_active__riR4-\"};","import s from \"./DialogsItems.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype DialogsItemsProps = {\r\n    id: string\r\n    name: string\r\n    avatar: string\r\n    key: string\r\n}\r\n\r\nexport const DialogsItems = (props: DialogsItemsProps) => {\r\n    return (\r\n        <div className={s.dialogsItems}>\r\n            <NavLink to={'/dialogs/' + props.id}>\r\n                {props.name}\r\n                <img className={s.avatar} src={props.avatar} alt={'avatar'}/>\r\n            </NavLink>\r\n\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messageContainer\":\"DialogsMessages_messageContainer__tAutC\",\"message\":\"DialogsMessages_message__h5M-j\",\"messageBox\":\"DialogsMessages_messageBox__IkbwJ\",\"avatar\":\"DialogsMessages_avatar__p1RHl\"};","import s from \"./DialogsMessages.module.css\";\r\n\r\nimport React from \"react\";\r\n\r\n\r\ntype DialogsMessagesProps = {\r\n    message: string\r\n    avatar?: string\r\n    key: string\r\n}\r\nexport const DialogsMessages = (props: DialogsMessagesProps) => {\r\n    return (\r\n            <div className={s.messageContainer}>\r\n                {!!props.avatar?<img className={s.avatar} src={props.avatar} alt={'avatar'}/>\r\n                    : <img className={s.avatar} src=\"https://avatars.dzeninfra.ru/get-zen_doc/1709006/pub_607b051b4e4db437d9a46222_607b052d90024f5c10a46608/scale_1200\" alt=\"joj\"/>}\r\n                <div className={s.messageBox}>\r\n                    <span className={s.message}>{props.message}</span>\r\n                </div>\r\n            </div>\r\n    )\r\n}","import React, {FC} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport {TextareaFC} from \"../common/FormsControls/TextareaTC/TextareaFC\";\r\nimport {ButtonSubmit} from \"../common/FormsControls/ButtonSubmit/ButtonSubmit\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validator\";\r\n\r\nexport type MessageFormDataType = {\r\n    message: string\r\n}\r\nconst maxLength = maxLengthCreator(250)\r\nconst MessageForm: FC<InjectedFormProps<MessageFormDataType>> = (props) => {\r\n    const {handleSubmit,reset} = props\r\n    const handleFormSubmit = (values:any) => {\r\n        handleSubmit(values)\r\n        reset()\r\n    }\r\n    return (\r\n        <form onSubmit={handleFormSubmit} className={s.form}>\r\n            <div className={s.data}>\r\n                <Field placeholder='Enter you message'\r\n                       type='text'\r\n                       name='message'\r\n                       validate={[required, maxLength]}\r\n                       component={TextareaFC}\r\n                />\r\n            </div>\r\n            <ButtonSubmit form={MessageForm}/>\r\n        </form>\r\n    )\r\n}\r\nexport const MessageReduxForm = reduxForm<MessageFormDataType>({\r\n    // a unique name for the form\r\n    form: 'dialogAddMessageForm'\r\n})(MessageForm)","import {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport React from \"react\";\r\nimport {addMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {DispatchType, StateType} from \"../../redux/redux-store\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogsData: state.dialogsPage.dialogs,\r\n        messagesData: state.dialogsPage.messages,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: DispatchType)=> {\r\n    return {\r\n        sendMessage: (message: string) => dispatch(addMessageAC(message))\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    WithAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps))(Dialogs)","import React, {FC} from 'react';\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogsItems} from \"./DialogsItems/DialogsItems\";\r\nimport {DialogsMessages} from \"./DialogsMessages/DialogsMessages\";\r\nimport {MessageFormDataType, MessageReduxForm} from \"./MessageForm\";\r\n\r\nexport type DialogsProps = {\r\n    dialogsData: DialogsDataType[]\r\n    messagesData: MessagesDataType[]\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\nexport type DialogsDataType = {\r\n    id: string\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\nexport type MessagesDataType = {\r\n    id: string\r\n    message: string\r\n    avatar?: string\r\n}\r\n\r\nexport const Dialogs: FC<DialogsProps> = ({\r\n                                              dialogsData,\r\n                                              messagesData,\r\n                                              sendMessage\r\n                                          }) => {\r\n\r\n    const sendMessageHandler = (values: MessageFormDataType) => {\r\n        sendMessage(values.message)\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.dialogsContainer}>\r\n                </div>\r\n                <div className={s.dialogs}>\r\n                    <div className={s.dialogsItems}>\r\n                        {dialogsData.map(elem => {\r\n                            return (\r\n                                <DialogsItems id={elem.id} name={elem.name} avatar={elem.avatar} key={elem.id}/>\r\n                            )\r\n                        })}\r\n\r\n                    </div>\r\n                    <div className={s.dialogsMessages}>\r\n                        {messagesData.map(elem => {\r\n                            return (\r\n                                <DialogsMessages\r\n                                    message={elem.message}\r\n                                    avatar={elem.avatar}\r\n                                    key={elem.id}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    <div className={s.addDialogContainer}>\r\n                        <MessageReduxForm onSubmit={sendMessageHandler}/>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>)  {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__2DHEU\",\"dialogsItems\":\"Dialogs_dialogsItems__pTDQW\",\"addDialogContainer\":\"Dialogs_addDialogContainer__3hc1w\",\"messageInput\":\"Dialogs_messageInput__gnmua\"};"],"names":["DialogsItems","props","className","s","to","id","name","src","avatar","alt","DialogsMessages","message","maxLength","maxLengthCreator","MessageReduxForm","reduxForm","form","MessageForm","handleSubmit","reset","onSubmit","values","Field","placeholder","type","validate","required","component","TextareaFC","ButtonSubmit","compose","WithAuthRedirect","connect","state","dialogsData","dialogsPage","dialogs","messagesData","messages","dispatch","sendMessage","addMessageAC","map","elem","mapStateToProps","isAuth","auth","Component","restProps"],"sourceRoot":""}