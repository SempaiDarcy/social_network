{"version":3,"file":"static/js/703.f6cde6e0.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.module.css?6502","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileWall/ProfileWall.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/Avatar/UserAvatar.module.css?00f7","components/Profile/ProfileInfo/Avatar/UserAvatar.tsx","components/Profile/ProfileInfo/ProfileData/Contact/ProfileData.module.css","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css?9ff0","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/AddPost/AddPost.module.css?9fed","components/Profile/MyPosts/AddPost/AddPostForm.tsx","components/Profile/MyPosts/AddPost/AddPostContainer.tsx","components/Profile/MyPosts/AddPost/AddPost.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Posts/Post/Post.module.css?5668","components/Profile/MyPosts/Posts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"avatarContainer\":\"ProfileInfo_avatarContainer__WUSNj\",\"img\":\"ProfileInfo_img__COIeA\",\"hidden\":\"ProfileInfo_hidden__zhut1\",\"dataContainer\":\"ProfileInfo_dataContainer__Yg9Oz\",\"data\":\"ProfileInfo_data__O+eaY\",\"avatarImage\":\"ProfileInfo_avatarImage__a-OHZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatusWithHooks_status__YRX13\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from './ProfileStatusWithHooks.module.css'\nimport {TextField} from \"@material-ui/core\";\ntype ProfileStatusPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\nexport const ProfileStatusWithHooks = (props:ProfileStatusPropsType) => {\n    const [editMode,setEditMode] = useState(false);\n    const [status,setStatus] = useState(props.status)\n    useEffect(()=>{\n        setStatus(props.status)\n    },[props.status])\n    const activateEditMode = () => {\n        return setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n    const onChangeStatus = (e:ChangeEvent<HTMLInputElement|HTMLTextAreaElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n    return (\n        <div>\n            <h3 className={s.status}>STATUS:\n                {\n                    !editMode &&\n                    <div><span onDoubleClick={activateEditMode}>{props.status || \"------\"}</span></div>\n                }\n                {\n                    editMode && <div>\n                        <TextField autoFocus={true} onBlur={deactivateEditMode} value={status} onChange={onChangeStatus}/>\n                    </div>\n                }</h3>\n        </div>\n    );\n};\n","import React from 'react';\r\nimport s from \"../ProfileInfo.module.css\";\r\nimport wall from \"../../../../images/wall.jpg\";\r\n\r\nconst ProfileWall = () => {\r\n    return (\r\n        <div>\r\n            <div className={`${s.img} ${s.hidden}`}>\r\n                <img src={wall} alt=\"wall\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileWall;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"UserAvatar_container__k9KGO\",\"button\":\"UserAvatar_button__dqt6P\"};","import React, {ChangeEvent, FC} from \"react\";\r\nimport {Avatar, IconButton, Tooltip} from \"@material-ui/core\";\r\nimport {Photo} from \"@material-ui/icons\";\r\nimport s from './UserAvatar.module.css'\r\n\r\ntype UserAvatarPropsType = {\r\n    img: string\r\n    size: number\r\n    isOwner?: boolean\r\n    savePhoto?: (photo: File) => void\r\n}\r\nexport const UserAvatar: FC<UserAvatarPropsType> = ({img, size, isOwner, savePhoto}) => {\r\n    const avatarSize = {\r\n        width: `${size}px`,\r\n        height: `${size}px`,\r\n        border: `5px solid #e9ecef`\r\n    }\r\n\r\n    const onChangeMainPhoto = (event: ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files && event.target.files.length > 0)\r\n        savePhoto?.(event.target.files[0])\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            <Avatar src={img} style={avatarSize}/>\r\n            {isOwner &&\r\n                <IconButton className={s.button} component=\"label\">\r\n                    <Tooltip title='Change photo' arrow>\r\n                    <Photo/>\r\n                    </Tooltip>\r\n                    <input\r\n                        onChange={onChangeMainPhoto}\r\n                        type=\"file\"\r\n                        hidden\r\n                        accept=\"image/png, image/jpeg\"\r\n                    />\r\n                </IconButton>\r\n            }\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileData_profileInfo__maP-U\"};","import s from \"./Contact/ProfileData.module.css\";\r\nimport React, {FC} from \"react\";\r\nimport {ProfileUserType} from \"../../../../redux/types\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileUserType\r\n}\r\nexport const ProfileData:FC<ProfileDataPropsType> = ({profile}) => {\r\n    return (\r\n        <div className={s.data}>\r\n            <span> About me: {profile.aboutMe} </span>\r\n            <span> Looking for a job: {profile.lookingForAJob ? \"✅\" : \"\"}</span>\r\n            {profile.lookingForAJob && <span> Skills: {profile.lookingForAJobDescription}</span>}\r\n            {/*<span> Contacts: </span>*/}\r\n            {/*{Object.entries(profile.contacts)*/}\r\n            {/*    .map(elem => <Contact key={elem[0]} title={elem[0]} link={elem[1]}/>)}*/}\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ProfileDataForm_form__fp5v2\",\"error\":\"ProfileDataForm_error__AGmAN\"};","import React, {FC} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from './ProfileDataForm.module.css'\r\nimport {TextareaFC} from \"../../../common/FormsControls/TextareaTC/TextareaFC\";\r\nimport {CheckboxTC} from \"../../../common/FormsControls/CheckboxTC/CheckboxTC\";\r\nimport {required} from \"../../../../utils/validators/validator\";\r\nimport {ButtonSubmit} from \"../../../common/FormsControls/ButtonSubmit/ButtonSubmit\";\r\n\r\nexport type ProfileDataFormDataType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\nexport const ProfileDataForm: FC<InjectedFormProps<ProfileDataFormDataType>> = (props) => {\r\n    const {handleSubmit, error} = props\r\n    const model = {\r\n        facebook: '',\r\n        website: '',\r\n        vk: '',\r\n        twitter: '',\r\n        instagram: '',\r\n        youtube: '',\r\n        github: '',\r\n        mainLink: '',\r\n    }\r\n    return <form onSubmit={handleSubmit} className={s.form}>\r\n        {error && <div className={s.error}> { error } </div>}\r\n        <Field placeholder='Full name'\r\n               type='text'\r\n               name='fullName'\r\n               component={TextareaFC}\r\n               validate={[required]}\r\n        />\r\n        <Field placeholder='About'\r\n               type='text'\r\n               name='aboutMe'\r\n               component={TextareaFC}\r\n               validate={[required]}\r\n        />\r\n        <Field type='checkbox'\r\n               name='lookingForAJob'\r\n               component={CheckboxTC}\r\n               validate={[required]}\r\n               label='Looking for a job'/>\r\n        <Field placeholder='Skills'\r\n               type='text'\r\n               name='lookingForAJobDescription'\r\n               component={TextareaFC}\r\n        />\r\n        {Object.keys(model).map(key => <Field placeholder={key}\r\n                                              key={key}\r\n                                              type='text'\r\n                                              name={key}\r\n                                              component={TextareaFC}\r\n        />)}\r\n\r\n        <ButtonSubmit form={ProfileDataForm}/>\r\n    </form>\r\n}\r\nexport const ProfileForm = reduxForm<ProfileDataFormDataType>({\r\n    form: 'profileInfoForm'\r\n})(ProfileDataForm)","import React, {useState} from 'react';\nimport s from './ProfileInfo.module.css';\nimport {ProfileType} from \"../../../redux/store\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatus/ProfileStatusWithHooks\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport ProfileWall from \"./ProfileWall/ProfileWall\";\nimport {UserAvatar} from \"./Avatar/UserAvatar\";\nimport {ProfileDataFormDataType} from \"../../../api/api\";\nimport {Button} from \"@material-ui/core\";\nimport {ProfileData} from \"./ProfileData/ProfileData\";\nimport {ProfileForm} from \"./ProfileDataForm/ProfileDataForm\";\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (photo: File) => void\n    saveProfile: (data: ProfileDataFormDataType) => void\n}\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    const onSubmit = (data: ProfileDataFormDataType) => {\n        props.saveProfile(data)\n        setEditMode(false)\n    }\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <ProfileWall/>\n            <div className={s.avatarContainer}>\n                <UserAvatar img={props.profile.photos.large}\n                            savePhoto={props.savePhoto}\n                            size={200}\n                            isOwner={props.isOwner}\n                />\n                <div className={s.infoContainer}>\n                    <div className={s.Name}><h3>Имя: {props.profile.fullName}</h3></div>\n                    <ProfileStatusWithHooks status={props.status}\n                                            updateStatus={props.updateStatus}/>\n                    <h3>{editMode\n                        ? <ProfileForm onSubmit={onSubmit} initialValues={props.profile}/>\n                        : <ProfileData profile={props.profile}/>}</h3>\n                    {props.isOwner && !editMode\n                        && <Button onClick={() => setEditMode(true)}\n                                   variant='contained'\n                                   color='primary'\n                                   className={s.editButton}\n                        >\n                            Edit\n                        </Button>}\n                </div>\n            </div>\n            {/*<div>*/}\n            {/*    <table>*/}\n            {/*        <tbody>*/}\n            {/*        <tr>*/}\n            {/*            <td className={s.avatarContainer}>*/}\n            {/*                <img className={s.avatarImage}*/}\n            {/*                     src={props.profile.photos.large !== null ? props.profile.photos.large : \"https://avatars.mds.yandex.net/i?id=0bbeac957963e13882ae83d5c690a08e603d7664-7803878-images-thumbs&n=13\"}*/}\n            {/*                     alt=\"avatar\"/>*/}\n            {/*            </td>*/}\n            {/*            <td className={s.dataContainer}>*/}\n            {/*                <div className={s.name}>Name: {props.profile.fullName}</div>*/}\n            {/*                <div className={s.data}>{props.profile.aboutMe}</div>*/}\n            {/*                <div className={s.data}>{props.profile.contacts.github}</div>*/}\n            {/*                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>*/}\n            {/*            </td>*/}\n            {/*        </tr>*/}\n            {/*        </tbody>*/}\n            {/*    </table>*/}\n            {/*</div>*/}\n        </div>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"postContainer\":\"AddPost_postContainer__QEFf9\",\"title\":\"AddPost_title__2I6sa\",\"newPost\":\"AddPost_newPost__Lr2BS\",\"buttonContainer\":\"AddPost_buttonContainer__sE1Jk\"};","import React, {FC} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from \"../../../Dialogs/Dialogs.module.css\";\r\nimport {TextareaFC} from \"../../../common/FormsControls/TextareaTC/TextareaFC\";\r\nimport {ButtonSubmit} from \"../../../common/FormsControls/ButtonSubmit/ButtonSubmit\";\r\nimport {maxLengthCreator} from \"../../../../utils/validators/validator\";\r\n\r\nexport type AddPostFormDataType = {\r\n    post: string\r\n}\r\nconst maxLength = maxLengthCreator(100)\r\nconst AddPostForm: FC<InjectedFormProps<AddPostFormDataType>> = (props) => {\r\n    const {handleSubmit} = props\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.form}>\r\n            <div className={s.data}>\r\n                <Field placeholder='Enter you post'\r\n                       type='text'\r\n                       name='post'\r\n                       component={TextareaFC}\r\n                       validate={[maxLength]}\r\n                />\r\n            </div>\r\n                <ButtonSubmit form={AddPostForm}/>\r\n        </form>\r\n    )\r\n}\r\nexport const AddPostReduxForm = reduxForm<AddPostFormDataType>({\r\n    form: 'profileAddPostForm'\r\n})(AddPostForm)","import {AddPost} from \"./AddPost\";\r\nimport {connect} from \"react-redux\";\r\nimport {DispatchType} from \"../../../../redux/redux-store\";\r\nimport {addPostAC} from \"../../../../redux/profile-reducer\";\r\n\r\ntype  MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: DispatchType): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => dispatch(addPostAC(newPostText))\r\n    }\r\n}\r\n\r\nexport const AddPostContainer = connect(null, mapDispatchToProps )(AddPost)","import React, {FC} from \"react\";\r\nimport c from \"./AddPost.module.css\";\r\nimport {AddPostFormDataType, AddPostReduxForm} from \"./AddPostForm\";\r\n\r\ntype AddPostProps = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport const AddPost: FC<AddPostProps> = ({addPost}) => {\r\n    const addPostHandler = (values: AddPostFormDataType):void => {\r\n        addPost(values.post)\r\n    }\r\n    return (\r\n        <div className={c.postContainer}>\r\n            <h3 className={c.title}>My posts</h3>\r\n            <AddPostReduxForm onSubmit={addPostHandler}/>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__KctLs\",\"profile\":\"Post_profile__JI2zE\",\"avatar\":\"Post_avatar__zJrdE\",\"name\":\"Post_name__+JFdR\",\"message\":\"Post_message__aduwm\",\"likes\":\"Post_likes__MEGF7\",\"parent\":\"Post_parent__x5-Jj\",\"likesCount\":\"Post_likesCount__SLhan\",\"like\":\"Post_like__4exyK\"};","import s from \"./Post.module.css\";\nimport like from './../img/like.png'\nexport type PropsType = {\n    id:string\n    message: string,\n    likes: number,\n    addLike:(count:number,id:string)=>void\n};\nexport const Post = (props: PropsType) => {\n    const addLike = () => {\n        let likes = props.likes+1\n        props.addLike(likes,props.id)\n    }\n    return (\n        <div className={s.post}>\n            <div className={s.profile}>\n                <img className={s.avatar}\n                     src=\"https://avatars.mds.yandex.net/i?id=1b423d69437bfdaff08a53402617e97ed457c044-7763867-images-thumbs&n=13\"\n                     alt=\"avatar\"/>\n                <div className={s.name}>Akbar Gabdualiev</div>\n            </div>\n            <div className={s.message}>{props.message}</div>\n            <div className={s.parent}>\n                <span className={s.likesCount}>{props.likes}</span>\n                <img className={s.like} src={like} alt=\"\" onClick={addLike}/>\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__1wYX0\",\"addPost\":\"MyPosts_addPost__1QkB7\"};","import {connect} from \"react-redux\";\nimport {MyPosts} from \"./MyPosts\";\nimport {DispatchType, StateType} from \"../../../redux/redux-store\";\nimport {addLikeAC} from \"../../../redux/profile-reducer\";\nconst mapStateToProps = (state:StateType) => {\n    return {\n        posts:state.profilePage.posts,\n        userName: state.profilePage.profile.fullName,\n        userAvatar: state.profilePage.profile.photos.small\n    }\n}\nconst mapStateToDispatch = (dispatch:DispatchType) => {\n    return {\n        addLike:(count:number,id:string) => dispatch(addLikeAC(count,id))\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, mapStateToDispatch)(MyPosts)","import React from \"react\";\nimport {AddPostContainer} from \"./AddPost/AddPostContainer\";\nimport {Post} from \"./Posts/Post/Post\";\nimport {PostType} from \"../../../redux/store\";\nimport s from './MyPosts.module.css'\ntype MyPostsPropsType = {\n    posts:PostType[]\n    addLike:(count:number,id:string)=>void\n}\n\nexport const MyPosts = (props:MyPostsPropsType) => {\n\n    return (\n        <>\n            <div className={s.addPost}><AddPostContainer/></div>\n            <div className={s.posts}>\n                {props.posts.map(elem => {\n                    return (\n                        <Post key={elem.id}\n                              id={elem.id}\n                              message={elem.message}\n                              likes={elem.likes}\n                              addLike={props.addLike}\n                        />\n                    )\n                })}\n            </div>\n\n        </>\n    )\n}","import React from 'react';\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"../../redux/store\";\nimport {ProfileDataFormDataType} from \"../../api/api\";\ntype ProfilePropsType = {\n    profile:ProfileType,\n    status:string\n    updateStatus:(status:string)=>void\n    authUserId:number|null,\n    savePhoto: (photo: File) => void,\n    saveProfile: (data: ProfileDataFormDataType) => void,\n    isAuth:boolean\n    isOwner: boolean\n}\nexport const Profile = (props:ProfilePropsType) => {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}\n                            isOwner={props.isOwner} savePhoto={props.savePhoto}\n                            saveProfile={props.saveProfile}\n            />\n            <MyPostsContainer/>\n        </div>\n    )\n};\n","import React, {Component, ComponentType} from \"react\";\nimport {ProfileType} from \"../../redux/store\";\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    addLikeAC,\n    addPostAC,\n    getStatusProfileTC,\n    getUserProfileTC, savePhotoTC, saveProfileTC,\n    setUserProfile,\n    updateStatusProfileTC\n} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {StateType} from \"../../redux/redux-store\";\nimport {compose} from \"redux\";\nimport {ProfileDataFormDataType} from \"../../api/api\";\n\ntype ProfileContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\n\ntype mapStateToPropsType = {\n    profile: ProfileType,\n    status: string,\n    authUserId: number | null\n    isAuth: boolean\n}\ntype mapDispatchToPropsType = {\n    getUserProfileTC: (userID: string) => void\n    getStatusProfileTC: (userID: string) => void\n    updateUserStatus: (status: string) => void\n    savePhotoTC: (photo: File) => void\n    saveProfileTC: (data: ProfileDataFormDataType) => void\n}\ntype PathParamsType = {\n    userID: string\n}\ntype ContentPropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\n\nclass ProfileContainer extends Component<ContentPropsType> {\n    componentDidMount() {\n        let userId = this.props.match.params.userID\n        if (!userId) {\n            userId = this.props.authUserId ? this.props.authUserId.toString() : ''\n            if (userId === '') {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfileTC(userId)\n        this.props.getStatusProfileTC(userId)\n    }\n\n\n    render() {\n        console.log('Render Profile')\n        return (\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\n                     updateStatus={this.props.updateUserStatus} authUserId={this.props.authUserId}\n                     savePhoto={this.props.savePhotoTC}\n                     saveProfile={this.props.saveProfileTC}\n                     isAuth={this.props.isAuth}\n                     isOwner = {!this.props.match.params.userID}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (state: StateType): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authUserId: state.auth.id,\n        isAuth: state.auth.isAuth,\n    }\n}\n\nexport default compose<ComponentType>(\n    // WithAuthRedirect,\n    connect(mapStateToProps, {\n        addPost: addPostAC, addLikeAC, setUserProfile, getUserProfileTC, getStatusProfileTC,\n        updateUserStatus: updateStatusProfileTC, savePhotoTC, saveProfileTC}), withRouter)(ProfileContainer)","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Yc6L2\",\"dialogsItems\":\"Dialogs_dialogsItems__Rz9Tj\",\"addDialogContainer\":\"Dialogs_addDialogContainer__DvbJY\",\"messageInput\":\"Dialogs_messageInput__Z-PWx\"};"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","TextField","autoFocus","onBlur","updateStatus","value","onChange","e","currentTarget","src","wall","alt","UserAvatar","img","size","isOwner","savePhoto","avatarSize","width","height","border","Avatar","style","IconButton","component","Tooltip","title","arrow","Photo","event","target","files","length","type","hidden","accept","ProfileData","profile","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileForm","reduxForm","form","ProfileDataForm","handleSubmit","error","onSubmit","Field","placeholder","name","TextareaFC","validate","required","CheckboxTC","label","Object","keys","facebook","website","vk","twitter","instagram","youtube","github","mainLink","map","key","ButtonSubmit","ProfileInfo","photos","large","fullName","data","saveProfile","initialValues","Button","onClick","variant","color","Preloader","maxLength","maxLengthCreator","AddPostReduxForm","AddPostForm","AddPostContainer","connect","dispatch","addPost","newPostText","addPostAC","c","values","post","Post","message","likes","like","addLike","id","MyPostsContainer","state","posts","profilePage","userName","userAvatar","small","count","addLikeAC","elem","Profile","ProfileContainer","userId","this","match","params","userID","authUserId","toString","history","push","getUserProfileTC","getStatusProfileTC","console","log","updateUserStatus","savePhotoTC","saveProfileTC","isAuth","Component","compose","auth","setUserProfile","updateStatusProfileTC","withRouter"],"sourceRoot":""}